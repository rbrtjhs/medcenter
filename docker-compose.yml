version: "3.8"
services:
  examination-command-service:
    image: examinationcommandservice
    container_name: examination-command-service
    ports:
      - "${EXAMINATION_COMMAND_SERVICE_PORT}:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-examination-command-service:3306/eventstore
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker:29092
    depends_on:
      - mysql-examination-command-service

  mysql-examination-command-service:
    image: mysql:8.0.31-debian
    container_name: "mysql-examination-command-service"
    ports:
      - "${MYSQL_EXAMINATION_COMMAND_SERVICE_PORT}:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - ./ExaminationCommandService/src/main/resources/sql/:/docker-entrypoint-initdb.d/
      - /home/simpletask/Work/docker/volumes/microservice/mysql-examination-command-service/data:/var/lib/mysql

  doctor-service:
    image: doctorservice
    container_name: doctor-service
    ports:
      - "${DOCTOR_SERVICE_PORT}:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-doctor-service:3306/doctor_service
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker:29092
    depends_on:
      - mysql-doctor-service

  mysql-doctor-service:
    image: mysql:8.0.31-debian
    container_name: "mysql-doctor-service"
    ports:
      - "${MYSQL_DOCTOR_SERVICE_PORT}:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - ./DoctorService/src/main/resources/sql/:/docker-entrypoint-initdb.d/
      - /home/simpletask/Work/docker/volumes/microservice/mysql-doctor-service/data:/var/lib/mysql

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_CLIENT_PORT}:2181"

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "${BROKER_EXTERNAL_PORT}:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:${ZOOKEEPER_CLIENT_PORT}'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://broker:${BROKER_INTERNAL_PORT},PLAINTEXT_EXTERNAL://localhost:${BROKER_EXTERNAL_PORT}
      KAFKA_LISTENERS: PLAINTEXT_INTERNAL://broker:${BROKER_INTERNAL_PORT},PLAINTEXT_EXTERNAL://localhost:${BROKER_EXTERNAL_PORT}
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1


  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: broker-ui
    ports:
      - "${KAFKA_UI_PORT}:8080"
    depends_on:
      - zookeeper
      - broker
    environment:
      KAFKA_CLUSTERS_0_NAME: primary #default cluster name
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:${BROKER_INTERNAL_PORT}'
      KAFKA_CLUSTERS_0_ZOOKEEPER: 'zookeeper:${ZOOKEEPER_CLIENT_PORT}'
